@page "/books"
@inject IDialogService DialogService
@inject NavigationManager NavigationManager

<MudText Typo="Typo.h4">Books</MudText>
<div class="d-flex">
<MudButton Class="mr-2" Variant="Variant.Outlined" Color="Color.Primary" OnClick="@(()=>NavigationManager.NavigateTo("/CreateBook"))">Add Book</MudButton>
<MudTextField Class="ml-2" Style="width: 20%" Margin="Margin.Dense" Immediate="true" @bind-Value="_filter" Variant="Variant.Outlined" Label="Search..."/>
</div>
@if (_books == null)
{
    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
}
else
{
    <MudGrid>
        @foreach (var book in _filteredBooks.Skip((_selectedPagination - 1) * _elementsPerPage).Take(_elementsPerPage))
	    {
        <MudItem xs="4">
            <MudCard>
                <MudCardMedia Image="@book.Images.FirstOrDefault().Url" Height="200" />
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">@book.Title</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <div>
                        @foreach (var author in book.Authors)
                        {
                            var href = $"/author/{author.Id}";
                            <MudLink Href="@href" Class="pa-2" Typo="Typo.body1">@author.FullName</MudLink>
                        }
                    </div>
                    <MudText Typo="Typo.body2">Published in @book.PublishDate</MudText>
                </MudCardContent>
                <MudCardActions>
                    <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="@(()=>NavigationManager.NavigateTo($"/book/{book.Id}"))">Learn More</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
	    }
    </MudGrid>
    <div class="d-flex flex-column align-center">
        <MudPagination @bind-Selected="_selectedPagination" Count="@(_filteredBooks.ToList().Count/_elementsPerPage)"></MudPagination>
    </div>
}
@code {
    [Inject]
    public BookClient BookClient { get; set; }

    private int _selectedPagination = 1;
    private int _elementsPerPage = 1;
    private string _filter = String.Empty;
    private ICollection<BookDto> _books;
    public IEnumerable<BookDto> _filteredBooks => _books.Where(book => book.Title.ToLower().Contains(_filter));

    protected override async Task OnInitializedAsync()
    {
        _books = await BookClient.GetAll();
    }
}
