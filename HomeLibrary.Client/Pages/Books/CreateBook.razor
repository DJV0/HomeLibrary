@page "/CreateBook"
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@using AutoMapper
@using System.IO

<h3>Create book</h3>

<EditForm Model="BookDto" OnValidSubmit="HandleSubmit">
    <DataAnnotationsValidator />
    <MudGrid>
        <MudItem xs="12" sm="7">
            <MudTextField Label="Isbn" Required="true" @bind-Value="BookDto.ISBN" For="@(()=>BookDto.ISBN)" />
            <MudTextField Label="Title" Required="true" @bind-Value="BookDto.Title" For="@(()=>BookDto.Title)" />
            <div>
                <div class="d-inline-block">
                    Authors
                    @if (OpenLibraryBookDto.Book == null)
                    {
                        <MudIconButton Icon="@Icons.Material.Filled.Add" OnClick="@(()=>_isOpenAuthorPopover = _isOpenAuthorPopover ? false : true)"></MudIconButton>
                    }
                    <MudChipSet AllClosable="@(OpenLibraryBookDto.Book==null ? true:false)" OnClose="@(chip => RemoveAuthor(chip.Text))">
                        @foreach (var author in BookDto.Authors)
                        {
                            <MudChip Text="@author.FullName"></MudChip>
                        }
                    </MudChipSet>
                    <MudPopover Open="@_isOpenAuthorPopover" Class="pa-4" OverflowBehavior="OverflowBehavior.FlipNever" AnchorOrigin="Origin.CenterRight" TransformOrigin="Origin.CenterLeft">
                        <MudField>
                            <input list="Authors" @oninput="@(args => _inputAuthor = args.Value.ToString().ToLower())" placeholder="Type to serch..." aria-describedby="button-add-author" />
                            <a id="button-add-author" class="btn btn-primary" @onclick="@(()=>AddAuthor())">Add</a>
                            <datalist id="Authors">
                                @foreach (var author in filteredAuthors)
                                {
                                    <option value="@author.FullName"></option>
                                }
                            </datalist>
                        </MudField>
                    </MudPopover>
                </div>
            </div>
            <MudTextField Label="Publish date" Required="true" @bind-Value="BookDto.PublishDate" For="@(()=>BookDto.PublishDate)" />
            <MudTextField Label="Number of pages" Required="true" @bind-Value="BookDto.NumberOfPages" For="@(()=>BookDto.NumberOfPages)" />
            <div>
                <div class="d-inline-block">
                    Tags
                    <MudIconButton Icon="@Icons.Material.Filled.Add" OnClick="@(()=> _isOpenTagPopover = _isOpenTagPopover ? false : true)"></MudIconButton>
                    <MudPopover Open="@_isOpenTagPopover" Class="pa-4" OverflowBehavior="OverflowBehavior.FlipNever" AnchorOrigin="Origin.CenterRight" TransformOrigin="Origin.CenterLeft">
                        <MudField>
                            <input list="Tags" @oninput="@(args => _inputTag = args.Value.ToString().ToLower())" placeholder="Type to serch..." aria-describedby="button-add-tag" />
                            <a id="button-add-tag" class="btn btn-primary" @onclick="@(()=>AddTag())">Add</a>
                            <datalist id="Tags">
                                @foreach (var tag in filteredTags)
                                {
                                    <option value="@tag.Name"></option>
                                }
                            </datalist>
                        </MudField>
                    </MudPopover>
                </div>
                <MudChipSet AllClosable="true" OnClose="@(chip => RemoveTag(chip.Text))">
                    @foreach (var tag in BookDto.Tags)
                    {
                        <MudChip Text="@tag.Name"></MudChip>
                    }
                </MudChipSet>
            </div>
            <div>
                <MudGrid>
                    <MudItem>
                        <MudText>Images</MudText>
                    </MudItem>
                    <MudItem>
                        <InputFile id="input-file" OnChange="@HandleSelectedImages" multiple></InputFile>
                    </MudItem>
                </MudGrid>
                <MudGrid>
                    @foreach (var imageUri in ImageFiles)
                    {
                        <MudItem xs="3">
                            <MudCardMedia Image="@imageUri.Key" Height="200" @onclick="@(()=>ImageFiles.Remove(imageUri.Key))"></MudCardMedia>
                        </MudItem>
                    }
                </MudGrid>
            </div>
                <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary" Variant="Variant.Filled" Style="margin-top:20px;">Save</MudButton>
        </MudItem>
    </MudGrid>
</EditForm>

@code {
    private bool _isOpenTagPopover, _isOpenAuthorPopover;
    private string _inputTag = String.Empty;
    private string _inputAuthor = String.Empty;
    private IEnumerable<TagDto> _tags;
    private IEnumerable<AuthorDto> _authors;

    [Inject]
    public OpenLibraryClient OpenLibraryClient { get; set; }
    [Inject]
    public TagClient TagClient { get; set; }
    [Inject]
    public AuthorClient AuthorClient { get; set; }
    [Inject]
    public BookClient BookClient { get; set; }
    [Inject]
    public IMapper Mapper { get; set; }

    public string ISBN { get; set; }
    public OpenLibraryBookDto OpenLibraryBookDto { get; set; } = new OpenLibraryBookDto();
    public BookDto BookDto { get; set; } = new BookDto();
    public Dictionary<string,IBrowserFile> ImageFiles { get; set; } = new Dictionary<string, IBrowserFile>();
    public IEnumerable<TagDto> filteredTags => _tags.Where(tag => tag.Name.ToLower().Contains(_inputTag));
    public IEnumerable<AuthorDto> filteredAuthors => _authors.Where(author => author.FullName.ToLower().Contains(_inputAuthor));

    protected override async Task OnInitializedAsync()
    {
        _tags = await TagClient.GetAll();
        _authors = await AuthorClient.GetAll();
        var dialogParameters = new DialogParameters();
        dialogParameters.Add("ISBN", ISBN);
        var dialog = await DialogService.Show<CreateBookDialog>
            (
                "Add new book",
                dialogParameters,
                new DialogOptions() { DisableBackdropClick = true }
            ).Result;
        if (dialog.Data != null)
        {
            ISBN = dialog.Data as string;
            OpenLibraryBookDto = await OpenLibraryClient.GetBook(ISBN);
            if (OpenLibraryBookDto.Book == null)
            {
                Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;
                Snackbar.Add("Book wasn't founded!", Severity.Warning);
                return;
            }
            BookDto = Mapper.Map<BookDto>(OpenLibraryBookDto);
            foreach (var author in BookDto.Authors)
            {
                if (_authors.Any(a => a.FullName == author.FullName))
                {
                    author.Id = _authors.First(a => a.FullName == author.FullName).Id;
                }
            }
            ImageFiles.Add(Mapper.Map<ImageDto>(OpenLibraryBookDto.Book.cover).Uri, null);
        }
    }

    private async Task HandleSubmit()
    {
        foreach (var file in ImageFiles)
        {
            if(file.Value == null)
            {
                BookDto.Images.Add(new ImageDto { Uri = file.Key });
                continue;
            }
            else
            {
                var client = new HttpClient() { BaseAddress = new Uri("https://localhost:44333") };
                var content = new MultipartFormDataContent();
                using Stream fileStream = file.Value.OpenReadStream(int.MaxValue);
                using MemoryStream ms = new MemoryStream();
                await fileStream.CopyToAsync(ms);
                content.Add(new ByteArrayContent(ms.ToArray()), "files", file.Value.Name);
                var responce = await client.PostAsync("/api/uploadfiles/upload", content);
                responce.EnsureSuccessStatusCode();
                var uriList = await responce.Content.ReadFromJsonAsync<IDictionary<string, string>>();
                foreach (var item in uriList)
                {
                    BookDto.Images.Add(new ImageDto { FileName = item.Key, Uri = item.Value });
                }
            }
        }
        var newBook = await BookClient.Create(BookDto);
        if(newBook == null)
        {
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;
            Snackbar.Add("Book wasn't created!", Severity.Warning);
            return;
        }
        NavigationManager.NavigateTo($"/book/{newBook.Id}");
    }

    private async Task HandleSelectedImages(InputFileChangeEventArgs e)
    {
        foreach (var file in e.GetMultipleFiles())
        {
            var image = await file.RequestImageFileAsync("image/jpeg", maxWith: 640, maxHeight: 480);
            using Stream fileStream = image.OpenReadStream();
            using MemoryStream ms = new MemoryStream();
            await fileStream.CopyToAsync(ms);
            var imageUri = $"data:image/jpeg;base64,{Convert.ToBase64String(ms.ToArray())}";
            ImageFiles.Add(imageUri, file);
        }
    }

    private void RemoveTag(string tagName)
    {
        var tag = BookDto.Tags.FirstOrDefault(tag => tag.Name == tagName);
        BookDto.Tags.Remove(tag);
    }

    private void AddTag()
    {
        var selectedTag = _tags.FirstOrDefault(tag => tag.Name.ToLower().Contains(_inputTag));
        if (selectedTag != null &&
            BookDto.Tags.Count <= 10 &&
            BookDto.Tags.FirstOrDefault(tag => tag.Name == selectedTag.Name) == null)
            BookDto.Tags.Add(selectedTag);
    }

    private void AddAuthor()
    {
        var selectedAuthor = _authors.FirstOrDefault(author => author.FullName.ToLower().Contains(_inputAuthor));
        if (selectedAuthor != null && BookDto.Authors.FirstOrDefault(author => author.Id == selectedAuthor.Id) == null)
            BookDto.Authors.Add(selectedAuthor);
    }

    private void RemoveAuthor(string authorName)
    {
        var author = BookDto.Authors.FirstOrDefault(author => author.FullName == authorName);
        BookDto.Authors.Remove(author);
    }
}
